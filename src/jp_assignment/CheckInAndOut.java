/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jp_assignment;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carl
 */
public class CheckInAndOut extends javax.swing.JFrame {

    /**
     * Creates new form CheckIn
     */
    public CheckInAndOut() {
        initComponents();
    }
    
    Receipt rc = new Receipt();
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllBookings = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnCheckIn = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        lblAllBooking = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Check In");
        setResizable(false);

        bgPanel.setBackground(new java.awt.Color(229, 238, 254));
        bgPanel.setPreferredSize(new java.awt.Dimension(1200, 650));
        bgPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblAllBookings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room ", "Guest Name", "Identity Type", "Identity Number", "Contact", "Email Address", "Check In", "Check Out", "Remarks", "Days Of Stays", "Status", "Service Tax", "Tourism Tax", "Total Price"
            }
        ));
        tblAllBookings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAllBookingsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAllBookings);

        bgPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 880, -1));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        bgPanel.add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 100, 90, 40));

        btnCheckIn.setText("Check In");
        btnCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInActionPerformed(evt);
            }
        });
        bgPanel.add(btnCheckIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 170, 110, 40));

        btnMenu.setText("Menu");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        bgPanel.add(btnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 590, 110, 40));

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        bgPanel.add(btnPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 100, 90, 40));

        btnCheckOut.setText("Check Out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });
        bgPanel.add(btnCheckOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 220, 110, 40));

        lblAllBooking.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        lblAllBooking.setText("All Bookings");
        bgPanel.add(lblAllBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, 190, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(bgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
     String filePath = "C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\BookingDetails.txt";
        File file = new File(filePath);
               try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            
            DefaultTableModel model = (DefaultTableModel)tblAllBookings.getModel();
            Object[] tableLines = br.lines().toArray();
            model.setRowCount(0);
            for(int i = 0; i < tableLines.length; i++)
            {
                String line = tableLines[i].toString().trim();
                String[] dataRow = line.split(",");
                model.addRow(dataRow);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(AvailableRooms.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInActionPerformed
        // TODO add your handling code here:
        String searchRoomNumber, roomStatus ,filePath, line;
        DefaultTableModel model = (DefaultTableModel)tblAllBookings.getModel();
        int selectedRowIndex = tblAllBookings.getSelectedRow();
        searchRoomNumber =   model.getValueAt(selectedRowIndex, 0).toString();
        //      Changed status to unavailable
        
        
        
        roomStatus = "Occupied";
        filePath = "C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\Rooms.txt";
        ArrayList<String> tempArray = new ArrayList<>();
        try
        {
            try (FileReader fr = new FileReader(filePath) )
            {
                Scanner reader = new Scanner(fr);
                String[] lineArr;

                while ((line = reader.nextLine()) != null)
                {
                    lineArr = line.split(",");
                    if (lineArr[0].equals(searchRoomNumber))
                    {
                        tempArray.add
                        (
                            lineArr[0] + "," +
                            lineArr[1] + "," +
                            roomStatus);
             
                        
                                
                     ActionClass validOccupiedMessage = new ActionClass();
                    validOccupiedMessage.showValidMessage("Room has been Checked In !");
                    }
                    else
                    {
                        tempArray.add(line);

                    }
                    fr.close();

                }
                
            }
            catch (Exception e)
            {
            
            }
        }catch (Exception e)
        {
            ActionClass invalidOccupiedMessage = new ActionClass();
            invalidOccupiedMessage.showInvalidMessage("Check In Failed");
        }

        try
        {
            try (PrintWriter pr = new PrintWriter(filePath))
            {
                for (String str : tempArray )
                {
                    pr.println(str);
                }
                pr.close();
            }
        }
        catch (Exception e)
        {

        }

        
        String status,filePathBookingDetails, row ; 
        
        status = "Checked In";
        filePathBookingDetails = "C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\BookingDetails.txt";
        
        ArrayList<String> bookingDetailsArr = new ArrayList<>();
        try
        {
            try (FileReader fr = new FileReader(filePathBookingDetails) )
            {
                Scanner reader = new Scanner(fr);
                String[] rowArr;

                while ((row = reader.nextLine()) != null)
                {
                    rowArr = row.split(",");
                    if (rowArr[0].equals(searchRoomNumber))
                    {
                        bookingDetailsArr.add
                        (
                            rowArr[0] + "," +
                            rowArr[1] + "," +
                            rowArr[2] + "," +
                            rowArr[3] + "," +
                            rowArr[4] + "," +
                            rowArr[5] + "," +
                            rowArr[6] + "," +
                            rowArr[7] + "," +
                            rowArr[8] + "," +
                            rowArr[9] + "," +          
                            status + "," +                    
                            rowArr[11] + "," +                    
                            rowArr[12]  + "," +                   
                            rowArr[13]        
                            );

                    }
                    else
                    {
                        bookingDetailsArr.add(row);

                    }
                    fr.close();
                }
            }
            catch (Exception e)
            {

            }
        }catch (Exception e)
        {

        }

        try
        {
            try (PrintWriter pr = new PrintWriter(filePathBookingDetails))
            {
                for (String str : bookingDetailsArr )
                {
                    pr.println(str);
                }
                pr.close();
            }
        }
        catch (Exception e)
        {

        }
        
    }//GEN-LAST:event_btnCheckInActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Menu mn = new Menu();
        mn.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Resort Management System All Booking");
        MessageFormat footer = new MessageFormat("APU Java Assingment ");
        
        try
        {
            tblAllBookings.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        }
        catch (Exception e)
        {

            JOptionPane.showMessageDialog(null, "Cannot Print" +e.getMessage());
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void tblAllBookingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAllBookingsMouseClicked
        // TODO add your handling code here:
                DefaultTableModel model = (DefaultTableModel)tblAllBookings.getModel();
        int selectedRowIndex = tblAllBookings.getSelectedRow();
//        iptRoomNumber.setText(model.getValueAt(selectedRowIndex, 5).toString());
        
    }//GEN-LAST:event_tblAllBookingsMouseClicked

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        String searchRoomNumber;
        DefaultTableModel model = (DefaultTableModel)tblAllBookings.getModel();
        int selectedRowIndex = tblAllBookings.getSelectedRow();
        searchRoomNumber =   model.getValueAt(selectedRowIndex, 0).toString();
        
        
        String status,filePathBookingDetails, row ; 
        status = "CheckedOut";
        filePathBookingDetails = "C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\BookingDetails.txt";
        
        ArrayList<String> bookingDetailsArr = new ArrayList<>();
        try
        {
            try (FileReader fr = new FileReader(filePathBookingDetails) )
            {
                Scanner reader = new Scanner(fr);
                String[] rowArr;

                while ((row = reader.nextLine()) != null)
                {
                    rowArr = row.split(",");
                    if (rowArr[0].equals(searchRoomNumber))
                    {
                        bookingDetailsArr.add
                        (
                            rowArr[0] + "," +
                            rowArr[1] + "," +
                            rowArr[2] + "," +
                            rowArr[3] + "," +
                            rowArr[4] + "," +
                            rowArr[5] + "," +
                            rowArr[6] + "," +
                            rowArr[7] + "," +
                            rowArr[8] + "," +
                            rowArr[9] + "," +          
                            status + "," +                    
                            rowArr[11] + "," +                    
                            rowArr[12] + "," +                   
                            rowArr[13]                            
                                    
                            );

                    }
                    else
                    {
                        bookingDetailsArr.add(row);

                    }
                    fr.close();
                }
            }
            catch (Exception e)
            {

            }
        }catch (Exception e)
        {

        }

        try
        {
            try (PrintWriter pr = new PrintWriter(filePathBookingDetails))
            {
                for (String str : bookingDetailsArr )
                {
                    pr.println(str);
                }
                pr.close();
            }
        }
        catch (Exception e)
        {

        }
        
        
        
        
          try{
            String roomNumber, guestName, identityCard, identityNumber, checkIn , checkOut, contactNumber, emailAddress,remarks, DOS, totalPrice, serviceTax, tourismTax;
            roomNumber = model.getValueAt(selectedRowIndex, 0).toString();
            guestName = model.getValueAt(selectedRowIndex, 1).toString();
            identityCard = model.getValueAt(selectedRowIndex, 2).toString();
            identityNumber = model.getValueAt(selectedRowIndex, 3).toString();
            contactNumber = model.getValueAt(selectedRowIndex, 4).toString();
            emailAddress = model.getValueAt(selectedRowIndex, 5).toString();
//            Date checkIn = new SimpleDateFormat("dd-MMM-yyyy").parse((String)model.getValueAt(selectedRowIndex, 6));
//            Date checkOut = new SimpleDateFormat("dd-MMM-yyyy").parse((String)model.getValueAt(selectedRowIndex, 7));
            checkIn = model.getValueAt(selectedRowIndex, 6).toString();
            checkOut = model.getValueAt(selectedRowIndex, 7).toString();
remarks = model.getValueAt(selectedRowIndex, 8).toString();
            DOS = model.getValueAt(selectedRowIndex, 9).toString();
            
            status = model.getValueAt(selectedRowIndex, 10).toString();
                           serviceTax = model.getValueAt(selectedRowIndex, 11).toString();
            tourismTax = model.getValueAt(selectedRowIndex, 12).toString();
            
            totalPrice = model.getValueAt(selectedRowIndex, 13).toString();
            
            ActionClass ac = new ActionClass();
            ac.showValidMessage("Room has been Checked Out!");
     
            rc.setVisible(true);
            rc.pack();
            rc.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            
            rc.iptRoomNumber.setText(roomNumber);
            rc.iptGuestName.setText(guestName);
            rc.iptContactNumber.setText(contactNumber);
            rc.iptEmailAddress.setText(emailAddress);
            rc.iptCID.setText(checkIn);
            rc.iptCOD.setText(checkOut);
            rc.iptPricePerNight.setText("350");
            rc.iptDOS.setText(DOS);
            rc.iptTotalPrice.setText(totalPrice);
            rc.iptRemarks.setText(remarks);
   

            rc.iptServiceTax.setText(tourismTax);
            rc.iptTourismTax.setText(serviceTax);
           
            
            BufferedWriter bw = new BufferedWriter(new FileWriter("C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\AllTransactions.txt", true));
                bw.write(roomNumber + "," + guestName + "," + identityCard + "," + identityNumber+ "," + contactNumber + "," + emailAddress + "," + checkOut + "," + checkOut +  "," + remarks + "," + DOS + "," + serviceTax + "," + tourismTax+ ","  +totalPrice+ "\n");
                bw.close();
        
          }catch(Exception e)
          {
              
          }
            
        
         
  
        
        
        
        
        
        
        
        
        
        String roomStatus ,filePath, line;
       
        searchRoomNumber =   model.getValueAt(selectedRowIndex, 0).toString();
        //      Changed status to unavailable

        roomStatus = "Available";
        filePath = "C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\Rooms.txt";

        ArrayList<String> tempArray = new ArrayList<>();
        try
        {
            try (FileReader fr = new FileReader(filePath) )
            {
                Scanner reader = new Scanner(fr);
                String[] lineArr;

                while ((line = reader.nextLine()) != null)
                {
                    lineArr = line.split(",");
                    if (lineArr[0].equals(searchRoomNumber))
                    {
                        tempArray.add
                        (
                            lineArr[0] + "," +
                            lineArr[1] + "," +
                     
                            roomStatus);

                    }
                    else
                    {
                        tempArray.add(line);

                    }
                    fr.close();
                }
            }
            catch (Exception e)
            {

            }
        }catch (Exception e)
        {

        }

        try
        {
            try (PrintWriter pr = new PrintWriter(filePath))
            {
                for (String str : tempArray )
                {
                    pr.println(str);
                }
                pr.close();
            }
        }
        catch (Exception e)
        {

        }
        
        
        
        
        
    
        
        
        
        
        
        
        
        
          try
        {

            String rowLine;
            BufferedReader brBook = new BufferedReader(new FileReader("C:\\Users\\Carl\\Documents\\NetBeansProjects"
                    + "\\JP_Assignment\\src\\jp_assignment\\Database\\BookingDetails.txt"));
            String record;

            ArrayList<String> dltArray = new ArrayList<>();
            while((record = brBook.readLine()) != null)
            {
                String[] dataRow;
                dataRow = record.split(",");
                if(dataRow[0].equals(searchRoomNumber))
                {
                    dltArray.remove(dataRow[0] + "," + dataRow[1] + "," + dataRow[2] + "," + dataRow[3] + "," + dataRow[4] + "," + dataRow[5] + "," + dataRow[6] + "," + dataRow[7] + "," + dataRow[8] + "," + dataRow[9]+ ","+ dataRow[10]);
                }
                else
                {
                    dltArray.add(record);
                }
            }
            brBook.close();

            PrintWriter pwBook = new PrintWriter(new BufferedWriter(new FileWriter("C:\\Users\\Carl\\Documents\\NetBeansProjects\\JP_Assignment\\src\\jp_assignment\\Database\\BookingDetails.txt")));
            for(String rowline:dltArray)
            {
                pwBook.println(rowline);
            }
            pwBook.close();

        }catch(Exception e )
        {

        }
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_btnCheckOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInAndOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInAndOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInAndOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInAndOut.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckInAndOut().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgPanel;
    private javax.swing.JButton btnCheckIn;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAllBooking;
    private javax.swing.JTable tblAllBookings;
    // End of variables declaration//GEN-END:variables
}
